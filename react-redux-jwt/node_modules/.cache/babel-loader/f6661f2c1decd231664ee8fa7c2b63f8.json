{"ast":null,"code":"import { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nexport const register = (username, email, designationLevel, password) => dispatch => {\n  return AuthService.register(username, email, designationLevel, password).then(response => {\n    dispatch({\n      type: REGISTER_SUCCESS\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: response.data.message\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: REGISTER_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const login = (username, password) => dispatch => {\n  return AuthService.login(username, password).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};\nexport const logout = () => dispatch => {\n  AuthService.logout();\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","SET_MESSAGE","AuthService","register","username","email","designationLevel","password","dispatch","then","response","type","payload","data","message","Promise","resolve","error","toString","reject","login","user","logout"],"sources":["D:/webd/working/EmployeeCourse/springboot-reactjs-jwt-authentication-main/react-redux-jwt/src/actions/auth.js"],"sourcesContent":["import {\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGIN_SUCCESS,\n  LOGIN_FAIL,\n  LOGOUT,\n  SET_MESSAGE,\n} from \"./types\";\n\nimport AuthService from \"../services/auth.service\";\n\nexport const register = (username, email,designationLevel, password) => (dispatch) => {\n  return AuthService.register(username, email,designationLevel, password).then(\n    (response) => {\n      dispatch({\n        type: REGISTER_SUCCESS,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: response.data.message,\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: REGISTER_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const login = (username, password) => (dispatch) => {\n  return AuthService.login(username, password).then(\n    (data) => {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: { user: data },\n      });\n\n      return Promise.resolve();\n    },\n    (error) => {\n      const message =\n        (error.response &&\n          error.response.data &&\n          error.response.data.message) ||\n        error.message ||\n        error.toString();\n\n      dispatch({\n        type: LOGIN_FAIL,\n      });\n\n      dispatch({\n        type: SET_MESSAGE,\n        payload: message,\n      });\n\n      return Promise.reject();\n    }\n  );\n};\n\nexport const logout = () => (dispatch) => {\n  AuthService.logout();\n\n  dispatch({\n    type: LOGOUT,\n  });\n};\n"],"mappings":"AAAA,SACEA,gBAAgB,EAChBC,aAAa,EACbC,aAAa,EACbC,UAAU,EACVC,MAAM,EACNC,WAAW,QACN,SAAS;AAEhB,OAAOC,WAAW,MAAM,0BAA0B;AAElD,OAAO,MAAMC,QAAQ,GAAG,CAACC,QAAQ,EAAEC,KAAK,EAACC,gBAAgB,EAAEC,QAAQ,KAAMC,QAAQ,IAAK;EACpF,OAAON,WAAW,CAACC,QAAQ,CAACC,QAAQ,EAAEC,KAAK,EAACC,gBAAgB,EAAEC,QAAQ,CAAC,CAACE,IAAI,CACzEC,QAAQ,IAAK;IACZF,QAAQ,CAAC;MACPG,IAAI,EAAEf;IACR,CAAC,CAAC;IAEFY,QAAQ,CAAC;MACPG,IAAI,EAAEV,WAAW;MACjBW,OAAO,EAAEF,QAAQ,CAACG,IAAI,CAACC;IACzB,CAAC,CAAC;IAEF,OAAOC,OAAO,CAACC,OAAO,EAAE;EAC1B,CAAC,EACAC,KAAK,IAAK;IACT,MAAMH,OAAO,GACVG,KAAK,CAACP,QAAQ,IACbO,KAAK,CAACP,QAAQ,CAACG,IAAI,IACnBI,KAAK,CAACP,QAAQ,CAACG,IAAI,CAACC,OAAO,IAC7BG,KAAK,CAACH,OAAO,IACbG,KAAK,CAACC,QAAQ,EAAE;IAElBV,QAAQ,CAAC;MACPG,IAAI,EAAEd;IACR,CAAC,CAAC;IAEFW,QAAQ,CAAC;MACPG,IAAI,EAAEV,WAAW;MACjBW,OAAO,EAAEE;IACX,CAAC,CAAC;IAEF,OAAOC,OAAO,CAACI,MAAM,EAAE;EACzB,CAAC,CACF;AACH,CAAC;AAED,OAAO,MAAMC,KAAK,GAAG,CAAChB,QAAQ,EAAEG,QAAQ,KAAMC,QAAQ,IAAK;EACzD,OAAON,WAAW,CAACkB,KAAK,CAAChB,QAAQ,EAAEG,QAAQ,CAAC,CAACE,IAAI,CAC9CI,IAAI,IAAK;IACRL,QAAQ,CAAC;MACPG,IAAI,EAAEb,aAAa;MACnBc,OAAO,EAAE;QAAES,IAAI,EAAER;MAAK;IACxB,CAAC,CAAC;IAEF,OAAOE,OAAO,CAACC,OAAO,EAAE;EAC1B,CAAC,EACAC,KAAK,IAAK;IACT,MAAMH,OAAO,GACVG,KAAK,CAACP,QAAQ,IACbO,KAAK,CAACP,QAAQ,CAACG,IAAI,IACnBI,KAAK,CAACP,QAAQ,CAACG,IAAI,CAACC,OAAO,IAC7BG,KAAK,CAACH,OAAO,IACbG,KAAK,CAACC,QAAQ,EAAE;IAElBV,QAAQ,CAAC;MACPG,IAAI,EAAEZ;IACR,CAAC,CAAC;IAEFS,QAAQ,CAAC;MACPG,IAAI,EAAEV,WAAW;MACjBW,OAAO,EAAEE;IACX,CAAC,CAAC;IAEF,OAAOC,OAAO,CAACI,MAAM,EAAE;EACzB,CAAC,CACF;AACH,CAAC;AAED,OAAO,MAAMG,MAAM,GAAG,MAAOd,QAAQ,IAAK;EACxCN,WAAW,CAACoB,MAAM,EAAE;EAEpBd,QAAQ,CAAC;IACPG,IAAI,EAAEX;EACR,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module"}
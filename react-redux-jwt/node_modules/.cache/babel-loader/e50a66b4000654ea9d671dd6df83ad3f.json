{"ast":null,"code":"\"use strict\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isTaxID;\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\nvar algorithms = _interopRequireWildcard(require(\"./util/algorithms\"));\nvar _isDate = _interopRequireDefault(require(\"./isDate\"));\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n  _getRequireWildcardCache = function _getRequireWildcardCache() {\n    return cache;\n  };\n  return cache;\n}\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n  if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n  var cache = _getRequireWildcardCache();\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n  newObj.default = obj;\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n  return newObj;\n}\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\n\n/**\n * TIN Validation\n * Validates Tax Identification Numbers (TINs) from the US, EU member states and the United Kingdom.\n *\n * EU-UK:\n * National TIN validity is calculated using public algorithms as made available by DG TAXUD.\n *\n * See `https://ec.europa.eu/taxation_customs/tin/specs/FS-TIN%20Algorithms-Public.docx` for more information.\n *\n * US:\n * An Employer Identification Number (EIN), also known as a Federal Tax Identification Number,\n *  is used to identify a business entity.\n *\n * NOTES:\n *  - Prefix 47 is being reserved for future use\n *  - Prefixes 26, 27, 45, 46 and 47 were previously assigned by the Philadelphia campus.\n *\n * See `http://www.irs.gov/Businesses/Small-Businesses-&-Self-Employed/How-EINs-are-Assigned-and-Valid-EIN-Prefixes`\n * for more information.\n */\n// Locale functions\n\n/*\n * bg-BG validation function\n * (Edinen graždanski nomer (EGN/ЕГН), persons only)\n * Checks if birth date (first six digits) is valid and calculates check (last) digit\n */\nfunction bgBgCheck(tin) {\n  // Extract full year, normalize month and check birth date validity\n  var century_year = tin.slice(0, 2);\n  var month = parseInt(tin.slice(2, 4), 10);\n  if (month > 40) {\n    month -= 40;\n    century_year = \"20\".concat(century_year);\n  } else if (month > 20) {\n    month -= 20;\n    century_year = \"18\".concat(century_year);\n  } else {\n    century_year = \"19\".concat(century_year);\n  }\n  if (month < 10) {\n    month = \"0\".concat(month);\n  }\n  var date = \"\".concat(century_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // split digits into an array for further processing\n\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  }); // Calculate checksum by multiplying digits with fixed values\n\n  var multip_lookup = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n  var checksum = 0;\n  for (var i = 0; i < multip_lookup.length; i++) {\n    checksum += digits[i] * multip_lookup[i];\n  }\n  checksum = checksum % 11 === 10 ? 0 : checksum % 11;\n  return checksum === digits[9];\n}\n/*\n * cs-CZ validation function\n * (Rodné číslo (RČ), persons only)\n * Checks if birth date (first six digits) is valid and divisibility by 11\n * Material not in DG TAXUD document sourced from:\n * -`https://lorenc.info/3MA381/overeni-spravnosti-rodneho-cisla.htm`\n * -`https://www.mvcr.cz/clanek/rady-a-sluzby-dokumenty-rodne-cislo.aspx`\n */\n\nfunction csCzCheck(tin) {\n  tin = tin.replace(/\\W/, ''); // Extract full year from TIN length\n\n  var full_year = parseInt(tin.slice(0, 2), 10);\n  if (tin.length === 10) {\n    if (full_year < 54) {\n      full_year = \"20\".concat(full_year);\n    } else {\n      full_year = \"19\".concat(full_year);\n    }\n  } else {\n    if (tin.slice(6) === '000') {\n      return false;\n    } // Three-zero serial not assigned before 1954\n\n    if (full_year < 54) {\n      full_year = \"19\".concat(full_year);\n    } else {\n      return false; // No 18XX years seen in any of the resources\n    }\n  } // Add missing zero if needed\n\n  if (full_year.length === 3) {\n    full_year = [full_year.slice(0, 2), '0', full_year.slice(2)].join('');\n  } // Extract month from TIN and normalize\n\n  var month = parseInt(tin.slice(2, 4), 10);\n  if (month > 50) {\n    month -= 50;\n  }\n  if (month > 20) {\n    // Month-plus-twenty was only introduced in 2004\n    if (parseInt(full_year, 10) < 2004) {\n      return false;\n    }\n    month -= 20;\n  }\n  if (month < 10) {\n    month = \"0\".concat(month);\n  } // Check date validity\n\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Verify divisibility by 11\n\n  if (tin.length === 10) {\n    if (parseInt(tin, 10) % 11 !== 0) {\n      // Some numbers up to and including 1985 are still valid if\n      // check (last) digit equals 0 and modulo of first 9 digits equals 10\n      var checkdigit = parseInt(tin.slice(0, 9), 10) % 11;\n      if (parseInt(full_year, 10) < 1986 && checkdigit === 10) {\n        if (parseInt(tin.slice(9), 10) !== 0) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n/*\n * de-AT validation function\n * (Abgabenkontonummer, persons/entities)\n * Verify TIN validity by calling luhnCheck()\n */\n\nfunction deAtCheck(tin) {\n  return algorithms.luhnCheck(tin);\n}\n/*\n * de-DE validation function\n * (Steueridentifikationsnummer (Steuer-IdNr.), persons only)\n * Tests for single duplicate/triplicate value, then calculates ISO 7064 check (last) digit\n * Partial implementation of spec (same result with both algorithms always)\n */\n\nfunction deDeCheck(tin) {\n  // Split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  }); // Fill array with strings of number positions\n\n  var occurences = [];\n  for (var i = 0; i < digits.length - 1; i++) {\n    occurences.push('');\n    for (var j = 0; j < digits.length - 1; j++) {\n      if (digits[i] === digits[j]) {\n        occurences[i] += j;\n      }\n    }\n  } // Remove digits with one occurence and test for only one duplicate/triplicate\n\n  occurences = occurences.filter(function (a) {\n    return a.length > 1;\n  });\n  if (occurences.length !== 2 && occurences.length !== 3) {\n    return false;\n  } // In case of triplicate value only two digits are allowed next to each other\n\n  if (occurences[0].length === 3) {\n    var trip_locations = occurences[0].split('').map(function (a) {\n      return parseInt(a, 10);\n    });\n    var recurrent = 0; // Amount of neighbour occurences\n\n    for (var _i = 0; _i < trip_locations.length - 1; _i++) {\n      if (trip_locations[_i] + 1 === trip_locations[_i + 1]) {\n        recurrent += 1;\n      }\n    }\n    if (recurrent === 2) {\n      return false;\n    }\n  }\n  return algorithms.iso7064Check(tin);\n}\n/*\n * dk-DK validation function\n * (CPR-nummer (personnummer), persons only)\n * Checks if birth date (first six digits) is valid and assigned to century (seventh) digit,\n * and calculates check (last) digit\n */\n\nfunction dkDkCheck(tin) {\n  tin = tin.replace(/\\W/, ''); // Extract year, check if valid for given century digit and add century\n\n  var year = parseInt(tin.slice(4, 6), 10);\n  var century_digit = tin.slice(6, 7);\n  switch (century_digit) {\n    case '0':\n    case '1':\n    case '2':\n    case '3':\n      year = \"19\".concat(year);\n      break;\n    case '4':\n    case '9':\n      if (year < 37) {\n        year = \"20\".concat(year);\n      } else {\n        year = \"19\".concat(year);\n      }\n      break;\n    default:\n      if (year < 37) {\n        year = \"20\".concat(year);\n      } else if (year > 58) {\n        year = \"18\".concat(year);\n      } else {\n        return false;\n      }\n      break;\n  } // Add missing zero if needed\n\n  if (year.length === 3) {\n    year = [year.slice(0, 2), '0', year.slice(2)].join('');\n  } // Check date validity\n\n  var date = \"\".concat(year, \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(0, 2));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Split digits into an array for further processing\n\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  var weight = 4; // Multiply by weight and add to checksum\n\n  for (var i = 0; i < 9; i++) {\n    checksum += digits[i] * weight;\n    weight -= 1;\n    if (weight === 1) {\n      weight = 7;\n    }\n  }\n  checksum %= 11;\n  if (checksum === 1) {\n    return false;\n  }\n  return checksum === 0 ? digits[9] === 0 : digits[9] === 11 - checksum;\n}\n/*\n * el-CY validation function\n * (Arithmos Forologikou Mitroou (AFM/ΑΦΜ), persons only)\n * Verify TIN validity by calculating ASCII value of check (last) character\n */\n\nfunction elCyCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.slice(0, 8).split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0; // add digits in even places\n\n  for (var i = 1; i < digits.length; i += 2) {\n    checksum += digits[i];\n  } // add digits in odd places\n\n  for (var _i2 = 0; _i2 < digits.length; _i2 += 2) {\n    if (digits[_i2] < 2) {\n      checksum += 1 - digits[_i2];\n    } else {\n      checksum += 2 * (digits[_i2] - 2) + 5;\n      if (digits[_i2] > 4) {\n        checksum += 2;\n      }\n    }\n  }\n  return String.fromCharCode(checksum % 26 + 65) === tin.charAt(8);\n}\n/*\n * el-GR validation function\n * (Arithmos Forologikou Mitroou (AFM/ΑΦΜ), persons/entities)\n * Verify TIN validity by calculating check (last) digit\n * Algorithm not in DG TAXUD document- sourced from:\n * - `http://epixeirisi.gr/%CE%9A%CE%A1%CE%99%CE%A3%CE%99%CE%9C%CE%91-%CE%98%CE%95%CE%9C%CE%91%CE%A4%CE%91-%CE%A6%CE%9F%CE%A1%CE%9F%CE%9B%CE%9F%CE%93%CE%99%CE%91%CE%A3-%CE%9A%CE%91%CE%99-%CE%9B%CE%9F%CE%93%CE%99%CE%A3%CE%A4%CE%99%CE%9A%CE%97%CE%A3/23791/%CE%91%CF%81%CE%B9%CE%B8%CE%BC%CF%8C%CF%82-%CE%A6%CE%BF%CF%81%CE%BF%CE%BB%CE%BF%CE%B3%CE%B9%CE%BA%CE%BF%CF%8D-%CE%9C%CE%B7%CF%84%CF%81%CF%8E%CE%BF%CF%85`\n */\n\nfunction elGrCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  for (var i = 0; i < 8; i++) {\n    checksum += digits[i] * Math.pow(2, 8 - i);\n  }\n  return checksum % 11 % 10 === digits[8];\n}\n/*\n * en-GB validation function (should go here if needed)\n * (National Insurance Number (NINO) or Unique Taxpayer Reference (UTR),\n * persons/entities respectively)\n */\n\n/*\n * en-IE validation function\n * (Personal Public Service Number (PPS No), persons only)\n * Verify TIN validity by calculating check (second to last) character\n */\n\nfunction enIeCheck(tin) {\n  var checksum = algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 7).map(function (a) {\n    return parseInt(a, 10);\n  }), 8);\n  if (tin.length === 9 && tin[8] !== 'W') {\n    checksum += (tin[8].charCodeAt(0) - 64) * 9;\n  }\n  checksum %= 23;\n  if (checksum === 0) {\n    return tin[7].toUpperCase() === 'W';\n  }\n  return tin[7].toUpperCase() === String.fromCharCode(64 + checksum);\n} // Valid US IRS campus prefixes\n\nvar enUsCampusPrefix = {\n  andover: ['10', '12'],\n  atlanta: ['60', '67'],\n  austin: ['50', '53'],\n  brookhaven: ['01', '02', '03', '04', '05', '06', '11', '13', '14', '16', '21', '22', '23', '25', '34', '51', '52', '54', '55', '56', '57', '58', '59', '65'],\n  cincinnati: ['30', '32', '35', '36', '37', '38', '61'],\n  fresno: ['15', '24'],\n  internet: ['20', '26', '27', '45', '46', '47'],\n  kansas: ['40', '44'],\n  memphis: ['94', '95'],\n  ogden: ['80', '90'],\n  philadelphia: ['33', '39', '41', '42', '43', '46', '48', '62', '63', '64', '66', '68', '71', '72', '73', '74', '75', '76', '77', '81', '82', '83', '84', '85', '86', '87', '88', '91', '92', '93', '98', '99'],\n  sba: ['31']\n}; // Return an array of all US IRS campus prefixes\n\nfunction enUsGetPrefixes() {\n  var prefixes = [];\n  for (var location in enUsCampusPrefix) {\n    // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\n    // istanbul ignore else\n    if (enUsCampusPrefix.hasOwnProperty(location)) {\n      prefixes.push.apply(prefixes, _toConsumableArray(enUsCampusPrefix[location]));\n    }\n  }\n  return prefixes;\n}\n/*\n * en-US validation function\n * Verify that the TIN starts with a valid IRS campus prefix\n */\n\nfunction enUsCheck(tin) {\n  return enUsGetPrefixes().indexOf(tin.substr(0, 2)) !== -1;\n}\n/*\n * es-ES validation function\n * (Documento Nacional de Identidad (DNI)\n * or Número de Identificación de Extranjero (NIE), persons only)\n * Verify TIN validity by calculating check (last) character\n */\n\nfunction esEsCheck(tin) {\n  // Split characters into an array for further processing\n  var chars = tin.toUpperCase().split(''); // Replace initial letter if needed\n\n  if (isNaN(parseInt(chars[0], 10)) && chars.length > 1) {\n    var lead_replace = 0;\n    switch (chars[0]) {\n      case 'Y':\n        lead_replace = 1;\n        break;\n      case 'Z':\n        lead_replace = 2;\n        break;\n      default:\n    }\n    chars.splice(0, 1, lead_replace); // Fill with zeros if smaller than proper\n  } else {\n    while (chars.length < 9) {\n      chars.unshift(0);\n    }\n  } // Calculate checksum and check according to lookup\n\n  var lookup = ['T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B', 'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E'];\n  chars = chars.join('');\n  var checksum = parseInt(chars.slice(0, 8), 10) % 23;\n  return chars[8] === lookup[checksum];\n}\n/*\n * et-EE validation function\n * (Isikukood (IK), persons only)\n * Checks if birth date (century digit and six following) is valid and calculates check (last) digit\n * Material not in DG TAXUD document sourced from:\n * - `https://www.oecd.org/tax/automatic-exchange/crs-implementation-and-assistance/tax-identification-numbers/Estonia-TIN.pdf`\n */\n\nfunction etEeCheck(tin) {\n  // Extract year and add century\n  var full_year = tin.slice(1, 3);\n  var century_digit = tin.slice(0, 1);\n  switch (century_digit) {\n    case '1':\n    case '2':\n      full_year = \"18\".concat(full_year);\n      break;\n    case '3':\n    case '4':\n      full_year = \"19\".concat(full_year);\n      break;\n    default:\n      full_year = \"20\".concat(full_year);\n      break;\n  } // Check date validity\n\n  var date = \"\".concat(full_year, \"/\").concat(tin.slice(3, 5), \"/\").concat(tin.slice(5, 7));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Split digits into an array for further processing\n\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  var weight = 1; // Multiply by weight and add to checksum\n\n  for (var i = 0; i < 10; i++) {\n    checksum += digits[i] * weight;\n    weight += 1;\n    if (weight === 10) {\n      weight = 1;\n    }\n  } // Do again if modulo 11 of checksum is 10\n\n  if (checksum % 11 === 10) {\n    checksum = 0;\n    weight = 3;\n    for (var _i3 = 0; _i3 < 10; _i3++) {\n      checksum += digits[_i3] * weight;\n      weight += 1;\n      if (weight === 10) {\n        weight = 1;\n      }\n    }\n    if (checksum % 11 === 10) {\n      return digits[10] === 0;\n    }\n  }\n  return checksum % 11 === digits[10];\n}\n/*\n * fi-FI validation function\n * (Henkilötunnus (HETU), persons only)\n * Checks if birth date (first six digits plus century symbol) is valid\n * and calculates check (last) digit\n */\n\nfunction fiFiCheck(tin) {\n  // Extract year and add century\n  var full_year = tin.slice(4, 6);\n  var century_symbol = tin.slice(6, 7);\n  switch (century_symbol) {\n    case '+':\n      full_year = \"18\".concat(full_year);\n      break;\n    case '-':\n      full_year = \"19\".concat(full_year);\n      break;\n    default:\n      full_year = \"20\".concat(full_year);\n      break;\n  } // Check date validity\n\n  var date = \"\".concat(full_year, \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(0, 2));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Calculate check character\n\n  var checksum = parseInt(tin.slice(0, 6) + tin.slice(7, 10), 10) % 31;\n  if (checksum < 10) {\n    return checksum === parseInt(tin.slice(10), 10);\n  }\n  checksum -= 10;\n  var letters_lookup = ['A', 'B', 'C', 'D', 'E', 'F', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y'];\n  return letters_lookup[checksum] === tin.slice(10);\n}\n/*\n * fr/nl-BE validation function\n * (Numéro national (N.N.), persons only)\n * Checks if birth date (first six digits) is valid and calculates check (last two) digits\n */\n\nfunction frBeCheck(tin) {\n  // Zero month/day value is acceptable\n  if (tin.slice(2, 4) !== '00' || tin.slice(4, 6) !== '00') {\n    // Extract date from first six digits of TIN\n    var date = \"\".concat(tin.slice(0, 2), \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(4, 6));\n    if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n      return false;\n    }\n  }\n  var checksum = 97 - parseInt(tin.slice(0, 9), 10) % 97;\n  var checkdigits = parseInt(tin.slice(9, 11), 10);\n  if (checksum !== checkdigits) {\n    checksum = 97 - parseInt(\"2\".concat(tin.slice(0, 9)), 10) % 97;\n    if (checksum !== checkdigits) {\n      return false;\n    }\n  }\n  return true;\n}\n/*\n * fr-FR validation function\n * (Numéro fiscal de référence (numéro SPI), persons only)\n * Verify TIN validity by calculating check (last three) digits\n */\n\nfunction frFrCheck(tin) {\n  tin = tin.replace(/\\s/g, '');\n  var checksum = parseInt(tin.slice(0, 10), 10) % 511;\n  var checkdigits = parseInt(tin.slice(10, 13), 10);\n  return checksum === checkdigits;\n}\n/*\n * fr/lb-LU validation function\n * (numéro d’identification personnelle, persons only)\n * Verify birth date validity and run Luhn and Verhoeff checks\n */\n\nfunction frLuCheck(tin) {\n  // Extract date and check validity\n  var date = \"\".concat(tin.slice(0, 4), \"/\").concat(tin.slice(4, 6), \"/\").concat(tin.slice(6, 8));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Run Luhn check\n\n  if (!algorithms.luhnCheck(tin.slice(0, 12))) {\n    return false;\n  } // Remove Luhn check digit and run Verhoeff check\n\n  return algorithms.verhoeffCheck(\"\".concat(tin.slice(0, 11)).concat(tin[12]));\n}\n/*\n * hr-HR validation function\n * (Osobni identifikacijski broj (OIB), persons/entities)\n * Verify TIN validity by calling iso7064Check(digits)\n */\n\nfunction hrHrCheck(tin) {\n  return algorithms.iso7064Check(tin);\n}\n/*\n * hu-HU validation function\n * (Adóazonosító jel, persons only)\n * Verify TIN validity by calculating check (last) digit\n */\n\nfunction huHuCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 8;\n  for (var i = 1; i < 9; i++) {\n    checksum += digits[i] * (i + 1);\n  }\n  return checksum % 11 === digits[9];\n}\n/*\n * lt-LT validation function (should go here if needed)\n * (Asmens kodas, persons/entities respectively)\n * Current validation check is alias of etEeCheck- same format applies\n */\n\n/*\n * it-IT first/last name validity check\n * Accepts it-IT TIN-encoded names as a three-element character array and checks their validity\n * Due to lack of clarity between resources (\"Are only Italian consonants used?\n * What happens if a person has X in their name?\" etc.) only two test conditions\n * have been implemented:\n * Vowels may only be followed by other vowels or an X character\n * and X characters after vowels may only be followed by other X characters.\n */\n\nfunction itItNameCheck(name) {\n  // true at the first occurence of a vowel\n  var vowelflag = false; // true at the first occurence of an X AFTER vowel\n  // (to properly handle last names with X as consonant)\n\n  var xflag = false;\n  for (var i = 0; i < 3; i++) {\n    if (!vowelflag && /[AEIOU]/.test(name[i])) {\n      vowelflag = true;\n    } else if (!xflag && vowelflag && name[i] === 'X') {\n      xflag = true;\n    } else if (i > 0) {\n      if (vowelflag && !xflag) {\n        if (!/[AEIOU]/.test(name[i])) {\n          return false;\n        }\n      }\n      if (xflag) {\n        if (!/X/.test(name[i])) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n}\n/*\n * it-IT validation function\n * (Codice fiscale (TIN-IT), persons only)\n * Verify name, birth date and codice catastale validity\n * and calculate check character.\n * Material not in DG-TAXUD document sourced from:\n * `https://en.wikipedia.org/wiki/Italian_fiscal_code`\n */\n\nfunction itItCheck(tin) {\n  // Capitalize and split characters into an array for further processing\n  var chars = tin.toUpperCase().split(''); // Check first and last name validity calling itItNameCheck()\n\n  if (!itItNameCheck(chars.slice(0, 3))) {\n    return false;\n  }\n  if (!itItNameCheck(chars.slice(3, 6))) {\n    return false;\n  } // Convert letters in number spaces back to numbers if any\n\n  var number_locations = [6, 7, 9, 10, 12, 13, 14];\n  var number_replace = {\n    L: '0',\n    M: '1',\n    N: '2',\n    P: '3',\n    Q: '4',\n    R: '5',\n    S: '6',\n    T: '7',\n    U: '8',\n    V: '9'\n  };\n  for (var _i4 = 0, _number_locations = number_locations; _i4 < _number_locations.length; _i4++) {\n    var i = _number_locations[_i4];\n    if (chars[i] in number_replace) {\n      chars.splice(i, 1, number_replace[chars[i]]);\n    }\n  } // Extract month and day, and check date validity\n\n  var month_replace = {\n    A: '01',\n    B: '02',\n    C: '03',\n    D: '04',\n    E: '05',\n    H: '06',\n    L: '07',\n    M: '08',\n    P: '09',\n    R: '10',\n    S: '11',\n    T: '12'\n  };\n  var month = month_replace[chars[8]];\n  var day = parseInt(chars[9] + chars[10], 10);\n  if (day > 40) {\n    day -= 40;\n  }\n  if (day < 10) {\n    day = \"0\".concat(day);\n  }\n  var date = \"\".concat(chars[6]).concat(chars[7], \"/\").concat(month, \"/\").concat(day);\n  if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n    return false;\n  } // Calculate check character by adding up even and odd characters as numbers\n\n  var checksum = 0;\n  for (var _i5 = 1; _i5 < chars.length - 1; _i5 += 2) {\n    var char_to_int = parseInt(chars[_i5], 10);\n    if (isNaN(char_to_int)) {\n      char_to_int = chars[_i5].charCodeAt(0) - 65;\n    }\n    checksum += char_to_int;\n  }\n  var odd_convert = {\n    // Maps of characters at odd places\n    A: 1,\n    B: 0,\n    C: 5,\n    D: 7,\n    E: 9,\n    F: 13,\n    G: 15,\n    H: 17,\n    I: 19,\n    J: 21,\n    K: 2,\n    L: 4,\n    M: 18,\n    N: 20,\n    O: 11,\n    P: 3,\n    Q: 6,\n    R: 8,\n    S: 12,\n    T: 14,\n    U: 16,\n    V: 10,\n    W: 22,\n    X: 25,\n    Y: 24,\n    Z: 23,\n    0: 1,\n    1: 0\n  };\n  for (var _i6 = 0; _i6 < chars.length - 1; _i6 += 2) {\n    var _char_to_int = 0;\n    if (chars[_i6] in odd_convert) {\n      _char_to_int = odd_convert[chars[_i6]];\n    } else {\n      var multiplier = parseInt(chars[_i6], 10);\n      _char_to_int = 2 * multiplier + 1;\n      if (multiplier > 4) {\n        _char_to_int += 2;\n      }\n    }\n    checksum += _char_to_int;\n  }\n  if (String.fromCharCode(65 + checksum % 26) !== chars[15]) {\n    return false;\n  }\n  return true;\n}\n/*\n * lv-LV validation function\n * (Personas kods (PK), persons only)\n * Check validity of birth date and calculate check (last) digit\n * Support only for old format numbers (not starting with '32', issued before 2017/07/01)\n * Material not in DG TAXUD document sourced from:\n * `https://boot.ritakafija.lv/forums/index.php?/topic/88314-personas-koda-algoritms-%C4%8Deksumma/`\n */\n\nfunction lvLvCheck(tin) {\n  tin = tin.replace(/\\W/, ''); // Extract date from TIN\n\n  var day = tin.slice(0, 2);\n  if (day !== '32') {\n    // No date/checksum check if new format\n    var month = tin.slice(2, 4);\n    if (month !== '00') {\n      // No date check if unknown month\n      var full_year = tin.slice(4, 6);\n      switch (tin[6]) {\n        case '0':\n          full_year = \"18\".concat(full_year);\n          break;\n        case '1':\n          full_year = \"19\".concat(full_year);\n          break;\n        default:\n          full_year = \"20\".concat(full_year);\n          break;\n      } // Check date validity\n\n      var date = \"\".concat(full_year, \"/\").concat(tin.slice(2, 4), \"/\").concat(day);\n      if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n        return false;\n      }\n    } // Calculate check digit\n\n    var checksum = 1101;\n    var multip_lookup = [1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\n    for (var i = 0; i < tin.length - 1; i++) {\n      checksum -= parseInt(tin[i], 10) * multip_lookup[i];\n    }\n    return parseInt(tin[10], 10) === checksum % 11;\n  }\n  return true;\n}\n/*\n * mt-MT validation function\n * (Identity Card Number or Unique Taxpayer Reference, persons/entities)\n * Verify Identity Card Number structure (no other tests found)\n */\n\nfunction mtMtCheck(tin) {\n  if (tin.length !== 9) {\n    // No tests for UTR\n    var chars = tin.toUpperCase().split(''); // Fill with zeros if smaller than proper\n\n    while (chars.length < 8) {\n      chars.unshift(0);\n    } // Validate format according to last character\n\n    switch (tin[7]) {\n      case 'A':\n      case 'P':\n        if (parseInt(chars[6], 10) === 0) {\n          return false;\n        }\n        break;\n      default:\n        {\n          var first_part = parseInt(chars.join('').slice(0, 5), 10);\n          if (first_part > 32000) {\n            return false;\n          }\n          var second_part = parseInt(chars.join('').slice(5, 7), 10);\n          if (first_part === second_part) {\n            return false;\n          }\n        }\n    }\n  }\n  return true;\n}\n/*\n * nl-NL validation function\n * (Burgerservicenummer (BSN) or Rechtspersonen Samenwerkingsverbanden Informatie Nummer (RSIN),\n * persons/entities respectively)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\n\nfunction nlNlCheck(tin) {\n  return algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {\n    return parseInt(a, 10);\n  }), 9) % 11 === parseInt(tin[8], 10);\n}\n/*\n * pl-PL validation function\n * (Powszechny Elektroniczny System Ewidencji Ludności (PESEL)\n * or Numer identyfikacji podatkowej (NIP), persons/entities)\n * Verify TIN validity by validating birth date (PESEL) and calculating check (last) digit\n */\n\nfunction plPlCheck(tin) {\n  // NIP\n  if (tin.length === 10) {\n    // Calculate last digit by multiplying with lookup\n    var lookup = [6, 5, 7, 2, 3, 4, 5, 6, 7];\n    var _checksum = 0;\n    for (var i = 0; i < lookup.length; i++) {\n      _checksum += parseInt(tin[i], 10) * lookup[i];\n    }\n    _checksum %= 11;\n    if (_checksum === 10) {\n      return false;\n    }\n    return _checksum === parseInt(tin[9], 10);\n  } // PESEL\n  // Extract full year using month\n\n  var full_year = tin.slice(0, 2);\n  var month = parseInt(tin.slice(2, 4), 10);\n  if (month > 80) {\n    full_year = \"18\".concat(full_year);\n    month -= 80;\n  } else if (month > 60) {\n    full_year = \"22\".concat(full_year);\n    month -= 60;\n  } else if (month > 40) {\n    full_year = \"21\".concat(full_year);\n    month -= 40;\n  } else if (month > 20) {\n    full_year = \"20\".concat(full_year);\n    month -= 20;\n  } else {\n    full_year = \"19\".concat(full_year);\n  } // Add leading zero to month if needed\n\n  if (month < 10) {\n    month = \"0\".concat(month);\n  } // Check date validity\n\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Calculate last digit by mulitplying with odd one-digit numbers except 5\n\n  var checksum = 0;\n  var multiplier = 1;\n  for (var _i7 = 0; _i7 < tin.length - 1; _i7++) {\n    checksum += parseInt(tin[_i7], 10) * multiplier % 10;\n    multiplier += 2;\n    if (multiplier > 10) {\n      multiplier = 1;\n    } else if (multiplier === 5) {\n      multiplier += 2;\n    }\n  }\n  checksum = 10 - checksum % 10;\n  return checksum === parseInt(tin[10], 10);\n}\n/*\n* pt-BR validation function\n* (Cadastro de Pessoas Físicas (CPF, persons)\n* Cadastro Nacional de Pessoas Jurídicas (CNPJ, entities)\n* Both inputs will be validated\n*/\n\nfunction ptBrCheck(tin) {\n  if (tin.length === 11) {\n    var _sum;\n    var remainder;\n    _sum = 0;\n    if (\n    // Reject known invalid CPFs\n    tin === '11111111111' || tin === '22222222222' || tin === '33333333333' || tin === '44444444444' || tin === '55555555555' || tin === '66666666666' || tin === '77777777777' || tin === '88888888888' || tin === '99999999999' || tin === '00000000000') return false;\n    for (var i = 1; i <= 9; i++) {\n      _sum += parseInt(tin.substring(i - 1, i), 10) * (11 - i);\n    }\n    remainder = _sum * 10 % 11;\n    if (remainder === 10) remainder = 0;\n    if (remainder !== parseInt(tin.substring(9, 10), 10)) return false;\n    _sum = 0;\n    for (var _i8 = 1; _i8 <= 10; _i8++) {\n      _sum += parseInt(tin.substring(_i8 - 1, _i8), 10) * (12 - _i8);\n    }\n    remainder = _sum * 10 % 11;\n    if (remainder === 10) remainder = 0;\n    if (remainder !== parseInt(tin.substring(10, 11), 10)) return false;\n    return true;\n  }\n  if (\n  // Reject know invalid CNPJs\n  tin === '00000000000000' || tin === '11111111111111' || tin === '22222222222222' || tin === '33333333333333' || tin === '44444444444444' || tin === '55555555555555' || tin === '66666666666666' || tin === '77777777777777' || tin === '88888888888888' || tin === '99999999999999') {\n    return false;\n  }\n  var length = tin.length - 2;\n  var identifiers = tin.substring(0, length);\n  var verificators = tin.substring(length);\n  var sum = 0;\n  var pos = length - 7;\n  for (var _i9 = length; _i9 >= 1; _i9--) {\n    sum += identifiers.charAt(length - _i9) * pos;\n    pos -= 1;\n    if (pos < 2) {\n      pos = 9;\n    }\n  }\n  var result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n  if (result !== parseInt(verificators.charAt(0), 10)) {\n    return false;\n  }\n  length += 1;\n  identifiers = tin.substring(0, length);\n  sum = 0;\n  pos = length - 7;\n  for (var _i10 = length; _i10 >= 1; _i10--) {\n    sum += identifiers.charAt(length - _i10) * pos;\n    pos -= 1;\n    if (pos < 2) {\n      pos = 9;\n    }\n  }\n  result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n  if (result !== parseInt(verificators.charAt(1), 10)) {\n    return false;\n  }\n  return true;\n}\n/*\n * pt-PT validation function\n * (Número de identificação fiscal (NIF), persons/entities)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\n\nfunction ptPtCheck(tin) {\n  var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {\n    return parseInt(a, 10);\n  }), 9) % 11;\n  if (checksum > 9) {\n    return parseInt(tin[8], 10) === 0;\n  }\n  return checksum === parseInt(tin[8], 10);\n}\n/*\n * ro-RO validation function\n * (Cod Numeric Personal (CNP) or Cod de înregistrare fiscală (CIF),\n * persons only)\n * Verify CNP validity by calculating check (last) digit (test not found for CIF)\n * Material not in DG TAXUD document sourced from:\n * `https://en.wikipedia.org/wiki/National_identification_number#Romania`\n */\n\nfunction roRoCheck(tin) {\n  if (tin.slice(0, 4) !== '9000') {\n    // No test found for this format\n    // Extract full year using century digit if possible\n    var full_year = tin.slice(1, 3);\n    switch (tin[0]) {\n      case '1':\n      case '2':\n        full_year = \"19\".concat(full_year);\n        break;\n      case '3':\n      case '4':\n        full_year = \"18\".concat(full_year);\n        break;\n      case '5':\n      case '6':\n        full_year = \"20\".concat(full_year);\n        break;\n      default:\n    } // Check date validity\n\n    var date = \"\".concat(full_year, \"/\").concat(tin.slice(3, 5), \"/\").concat(tin.slice(5, 7));\n    if (date.length === 8) {\n      if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n        return false;\n      }\n    } else if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n      return false;\n    } // Calculate check digit\n\n    var digits = tin.split('').map(function (a) {\n      return parseInt(a, 10);\n    });\n    var multipliers = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9];\n    var checksum = 0;\n    for (var i = 0; i < multipliers.length; i++) {\n      checksum += digits[i] * multipliers[i];\n    }\n    if (checksum % 11 === 10) {\n      return digits[12] === 1;\n    }\n    return digits[12] === checksum % 11;\n  }\n  return true;\n}\n/*\n * sk-SK validation function\n * (Rodné číslo (RČ) or bezvýznamové identifikačné číslo (BIČ), persons only)\n * Checks validity of pre-1954 birth numbers (rodné číslo) only\n * Due to the introduction of the pseudo-random BIČ it is not possible to test\n * post-1954 birth numbers without knowing whether they are BIČ or RČ beforehand\n */\n\nfunction skSkCheck(tin) {\n  if (tin.length === 9) {\n    tin = tin.replace(/\\W/, '');\n    if (tin.slice(6) === '000') {\n      return false;\n    } // Three-zero serial not assigned before 1954\n    // Extract full year from TIN length\n\n    var full_year = parseInt(tin.slice(0, 2), 10);\n    if (full_year > 53) {\n      return false;\n    }\n    if (full_year < 10) {\n      full_year = \"190\".concat(full_year);\n    } else {\n      full_year = \"19\".concat(full_year);\n    } // Extract month from TIN and normalize\n\n    var month = parseInt(tin.slice(2, 4), 10);\n    if (month > 50) {\n      month -= 50;\n    }\n    if (month < 10) {\n      month = \"0\".concat(month);\n    } // Check date validity\n\n    var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n    if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n      return false;\n    }\n  }\n  return true;\n}\n/*\n * sl-SI validation function\n * (Davčna številka, persons/entities)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\n\nfunction slSiCheck(tin) {\n  var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 7).map(function (a) {\n    return parseInt(a, 10);\n  }), 8) % 11;\n  if (checksum === 10) {\n    return parseInt(tin[7], 10) === 0;\n  }\n  return checksum === parseInt(tin[7], 10);\n}\n/*\n * sv-SE validation function\n * (Personnummer or samordningsnummer, persons only)\n * Checks validity of birth date and calls luhnCheck() to validate check (last) digit\n */\n\nfunction svSeCheck(tin) {\n  // Make copy of TIN and normalize to two-digit year form\n  var tin_copy = tin.slice(0);\n  if (tin.length > 11) {\n    tin_copy = tin_copy.slice(2);\n  } // Extract date of birth\n\n  var full_year = '';\n  var month = tin_copy.slice(2, 4);\n  var day = parseInt(tin_copy.slice(4, 6), 10);\n  if (tin.length > 11) {\n    full_year = tin.slice(0, 4);\n  } else {\n    full_year = tin.slice(0, 2);\n    if (tin.length === 11 && day < 60) {\n      // Extract full year from centenarian symbol\n      // Should work just fine until year 10000 or so\n      var current_year = new Date().getFullYear().toString();\n      var current_century = parseInt(current_year.slice(0, 2), 10);\n      current_year = parseInt(current_year, 10);\n      if (tin[6] === '-') {\n        if (parseInt(\"\".concat(current_century).concat(full_year), 10) > current_year) {\n          full_year = \"\".concat(current_century - 1).concat(full_year);\n        } else {\n          full_year = \"\".concat(current_century).concat(full_year);\n        }\n      } else {\n        full_year = \"\".concat(current_century - 1).concat(full_year);\n        if (current_year - parseInt(full_year, 10) < 100) {\n          return false;\n        }\n      }\n    }\n  } // Normalize day and check date validity\n\n  if (day > 60) {\n    day -= 60;\n  }\n  if (day < 10) {\n    day = \"0\".concat(day);\n  }\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(day);\n  if (date.length === 8) {\n    if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n      return false;\n    }\n  } else if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n  return algorithms.luhnCheck(tin.replace(/\\W/, ''));\n} // Locale lookup objects\n\n/*\n * Tax id regex formats for various locales\n *\n * Where not explicitly specified in DG-TAXUD document both\n * uppercase and lowercase letters are acceptable.\n */\n\nvar taxIdFormat = {\n  'bg-BG': /^\\d{10}$/,\n  'cs-CZ': /^\\d{6}\\/{0,1}\\d{3,4}$/,\n  'de-AT': /^\\d{9}$/,\n  'de-DE': /^[1-9]\\d{10}$/,\n  'dk-DK': /^\\d{6}-{0,1}\\d{4}$/,\n  'el-CY': /^[09]\\d{7}[A-Z]$/,\n  'el-GR': /^([0-4]|[7-9])\\d{8}$/,\n  'en-GB': /^\\d{10}$|^(?!GB|NK|TN|ZZ)(?![DFIQUV])[A-Z](?![DFIQUVO])[A-Z]\\d{6}[ABCD ]$/i,\n  'en-IE': /^\\d{7}[A-W][A-IW]{0,1}$/i,\n  'en-US': /^\\d{2}[- ]{0,1}\\d{7}$/,\n  'es-ES': /^(\\d{0,8}|[XYZKLM]\\d{7})[A-HJ-NP-TV-Z]$/i,\n  'et-EE': /^[1-6]\\d{6}(00[1-9]|0[1-9][0-9]|[1-6][0-9]{2}|70[0-9]|710)\\d$/,\n  'fi-FI': /^\\d{6}[-+A]\\d{3}[0-9A-FHJ-NPR-Y]$/i,\n  'fr-BE': /^\\d{11}$/,\n  'fr-FR': /^[0-3]\\d{12}$|^[0-3]\\d\\s\\d{2}(\\s\\d{3}){3}$/,\n  // Conforms both to official spec and provided example\n  'fr-LU': /^\\d{13}$/,\n  'hr-HR': /^\\d{11}$/,\n  'hu-HU': /^8\\d{9}$/,\n  'it-IT': /^[A-Z]{6}[L-NP-V0-9]{2}[A-EHLMPRST][L-NP-V0-9]{2}[A-ILMZ][L-NP-V0-9]{3}[A-Z]$/i,\n  'lv-LV': /^\\d{6}-{0,1}\\d{5}$/,\n  // Conforms both to DG TAXUD spec and original research\n  'mt-MT': /^\\d{3,7}[APMGLHBZ]$|^([1-8])\\1\\d{7}$/i,\n  'nl-NL': /^\\d{9}$/,\n  'pl-PL': /^\\d{10,11}$/,\n  'pt-BR': /(?:^\\d{11}$)|(?:^\\d{14}$)/,\n  'pt-PT': /^\\d{9}$/,\n  'ro-RO': /^\\d{13}$/,\n  'sk-SK': /^\\d{6}\\/{0,1}\\d{3,4}$/,\n  'sl-SI': /^[1-9]\\d{7}$/,\n  'sv-SE': /^(\\d{6}[-+]{0,1}\\d{4}|(18|19|20)\\d{6}[-+]{0,1}\\d{4})$/\n}; // taxIdFormat locale aliases\n\ntaxIdFormat['lb-LU'] = taxIdFormat['fr-LU'];\ntaxIdFormat['lt-LT'] = taxIdFormat['et-EE'];\ntaxIdFormat['nl-BE'] = taxIdFormat['fr-BE']; // Algorithmic tax id check functions for various locales\n\nvar taxIdCheck = {\n  'bg-BG': bgBgCheck,\n  'cs-CZ': csCzCheck,\n  'de-AT': deAtCheck,\n  'de-DE': deDeCheck,\n  'dk-DK': dkDkCheck,\n  'el-CY': elCyCheck,\n  'el-GR': elGrCheck,\n  'en-IE': enIeCheck,\n  'en-US': enUsCheck,\n  'es-ES': esEsCheck,\n  'et-EE': etEeCheck,\n  'fi-FI': fiFiCheck,\n  'fr-BE': frBeCheck,\n  'fr-FR': frFrCheck,\n  'fr-LU': frLuCheck,\n  'hr-HR': hrHrCheck,\n  'hu-HU': huHuCheck,\n  'it-IT': itItCheck,\n  'lv-LV': lvLvCheck,\n  'mt-MT': mtMtCheck,\n  'nl-NL': nlNlCheck,\n  'pl-PL': plPlCheck,\n  'pt-BR': ptBrCheck,\n  'pt-PT': ptPtCheck,\n  'ro-RO': roRoCheck,\n  'sk-SK': skSkCheck,\n  'sl-SI': slSiCheck,\n  'sv-SE': svSeCheck\n}; // taxIdCheck locale aliases\n\ntaxIdCheck['lb-LU'] = taxIdCheck['fr-LU'];\ntaxIdCheck['lt-LT'] = taxIdCheck['et-EE'];\ntaxIdCheck['nl-BE'] = taxIdCheck['fr-BE']; // Regexes for locales where characters should be omitted before checking format\n\nvar allsymbols = /[-\\\\\\/!@#$%\\^&\\*\\(\\)\\+\\=\\[\\]]+/g;\nvar sanitizeRegexes = {\n  'de-AT': allsymbols,\n  'de-DE': /[\\/\\\\]/g,\n  'fr-BE': allsymbols\n}; // sanitizeRegexes locale aliases\n\nsanitizeRegexes['nl-BE'] = sanitizeRegexes['fr-BE'];\n/*\n * Validator function\n * Return true if the passed string is a valid tax identification number\n * for the specified locale.\n * Throw an error exception if the locale is not supported.\n */\n\nfunction isTaxID(str) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  (0, _assertString.default)(str); // Copy TIN to avoid replacement if sanitized\n\n  var strcopy = str.slice(0);\n  if (locale in taxIdFormat) {\n    if (locale in sanitizeRegexes) {\n      strcopy = strcopy.replace(sanitizeRegexes[locale], '');\n    }\n    if (!taxIdFormat[locale].test(strcopy)) {\n      return false;\n    }\n    if (locale in taxIdCheck) {\n      return taxIdCheck[locale](strcopy);\n    } // Fallthrough; not all locales have algorithmic checks\n\n    return true;\n  }\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":{"version":3,"names":["_typeof","obj","Symbol","iterator","constructor","prototype","Object","defineProperty","exports","value","default","isTaxID","_assertString","_interopRequireDefault","require","algorithms","_interopRequireWildcard","_isDate","_getRequireWildcardCache","WeakMap","cache","__esModule","has","get","newObj","hasPropertyDescriptor","getOwnPropertyDescriptor","key","hasOwnProperty","call","desc","set","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","toString","slice","name","Array","from","test","iter","isArray","len","length","i","arr2","bgBgCheck","tin","century_year","month","parseInt","concat","date","digits","split","map","a","multip_lookup","checksum","csCzCheck","replace","full_year","join","checkdigit","deAtCheck","luhnCheck","deDeCheck","occurences","push","j","filter","trip_locations","recurrent","_i","iso7064Check","dkDkCheck","year","century_digit","weight","elCyCheck","_i2","String","fromCharCode","charAt","elGrCheck","Math","pow","enIeCheck","reverseMultiplyAndSum","charCodeAt","toUpperCase","enUsCampusPrefix","andover","atlanta","austin","brookhaven","cincinnati","fresno","internet","kansas","memphis","ogden","philadelphia","sba","enUsGetPrefixes","prefixes","location","apply","enUsCheck","indexOf","substr","esEsCheck","chars","isNaN","lead_replace","splice","unshift","lookup","etEeCheck","_i3","fiFiCheck","century_symbol","letters_lookup","frBeCheck","checkdigits","frFrCheck","frLuCheck","verhoeffCheck","hrHrCheck","huHuCheck","itItNameCheck","vowelflag","xflag","itItCheck","number_locations","number_replace","L","M","N","P","Q","R","S","T","U","V","_i4","_number_locations","month_replace","A","B","C","D","E","H","day","_i5","char_to_int","odd_convert","F","G","I","J","K","O","W","X","Y","Z","_i6","_char_to_int","multiplier","lvLvCheck","mtMtCheck","first_part","second_part","nlNlCheck","plPlCheck","_checksum","_i7","ptBrCheck","_sum","remainder","substring","_i8","identifiers","verificators","sum","pos","_i9","result","_i10","ptPtCheck","roRoCheck","multipliers","skSkCheck","slSiCheck","svSeCheck","tin_copy","current_year","Date","getFullYear","current_century","taxIdFormat","taxIdCheck","allsymbols","sanitizeRegexes","str","locale","arguments","undefined","strcopy","Error","module"],"sources":["D:/webd/working/EmployeeCourse/springboot-reactjs-jwt-authentication-main/react-redux-jwt/node_modules/validator/lib/isTaxID.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isTaxID;\n\nvar _assertString = _interopRequireDefault(require(\"./util/assertString\"));\n\nvar algorithms = _interopRequireWildcard(require(\"./util/algorithms\"));\n\nvar _isDate = _interopRequireDefault(require(\"./isDate\"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== \"function\") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/**\n * TIN Validation\n * Validates Tax Identification Numbers (TINs) from the US, EU member states and the United Kingdom.\n *\n * EU-UK:\n * National TIN validity is calculated using public algorithms as made available by DG TAXUD.\n *\n * See `https://ec.europa.eu/taxation_customs/tin/specs/FS-TIN%20Algorithms-Public.docx` for more information.\n *\n * US:\n * An Employer Identification Number (EIN), also known as a Federal Tax Identification Number,\n *  is used to identify a business entity.\n *\n * NOTES:\n *  - Prefix 47 is being reserved for future use\n *  - Prefixes 26, 27, 45, 46 and 47 were previously assigned by the Philadelphia campus.\n *\n * See `http://www.irs.gov/Businesses/Small-Businesses-&-Self-Employed/How-EINs-are-Assigned-and-Valid-EIN-Prefixes`\n * for more information.\n */\n// Locale functions\n\n/*\n * bg-BG validation function\n * (Edinen graždanski nomer (EGN/ЕГН), persons only)\n * Checks if birth date (first six digits) is valid and calculates check (last) digit\n */\nfunction bgBgCheck(tin) {\n  // Extract full year, normalize month and check birth date validity\n  var century_year = tin.slice(0, 2);\n  var month = parseInt(tin.slice(2, 4), 10);\n\n  if (month > 40) {\n    month -= 40;\n    century_year = \"20\".concat(century_year);\n  } else if (month > 20) {\n    month -= 20;\n    century_year = \"18\".concat(century_year);\n  } else {\n    century_year = \"19\".concat(century_year);\n  }\n\n  if (month < 10) {\n    month = \"0\".concat(month);\n  }\n\n  var date = \"\".concat(century_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // split digits into an array for further processing\n\n\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  }); // Calculate checksum by multiplying digits with fixed values\n\n  var multip_lookup = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n  var checksum = 0;\n\n  for (var i = 0; i < multip_lookup.length; i++) {\n    checksum += digits[i] * multip_lookup[i];\n  }\n\n  checksum = checksum % 11 === 10 ? 0 : checksum % 11;\n  return checksum === digits[9];\n}\n/*\n * cs-CZ validation function\n * (Rodné číslo (RČ), persons only)\n * Checks if birth date (first six digits) is valid and divisibility by 11\n * Material not in DG TAXUD document sourced from:\n * -`https://lorenc.info/3MA381/overeni-spravnosti-rodneho-cisla.htm`\n * -`https://www.mvcr.cz/clanek/rady-a-sluzby-dokumenty-rodne-cislo.aspx`\n */\n\n\nfunction csCzCheck(tin) {\n  tin = tin.replace(/\\W/, ''); // Extract full year from TIN length\n\n  var full_year = parseInt(tin.slice(0, 2), 10);\n\n  if (tin.length === 10) {\n    if (full_year < 54) {\n      full_year = \"20\".concat(full_year);\n    } else {\n      full_year = \"19\".concat(full_year);\n    }\n  } else {\n    if (tin.slice(6) === '000') {\n      return false;\n    } // Three-zero serial not assigned before 1954\n\n\n    if (full_year < 54) {\n      full_year = \"19\".concat(full_year);\n    } else {\n      return false; // No 18XX years seen in any of the resources\n    }\n  } // Add missing zero if needed\n\n\n  if (full_year.length === 3) {\n    full_year = [full_year.slice(0, 2), '0', full_year.slice(2)].join('');\n  } // Extract month from TIN and normalize\n\n\n  var month = parseInt(tin.slice(2, 4), 10);\n\n  if (month > 50) {\n    month -= 50;\n  }\n\n  if (month > 20) {\n    // Month-plus-twenty was only introduced in 2004\n    if (parseInt(full_year, 10) < 2004) {\n      return false;\n    }\n\n    month -= 20;\n  }\n\n  if (month < 10) {\n    month = \"0\".concat(month);\n  } // Check date validity\n\n\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Verify divisibility by 11\n\n\n  if (tin.length === 10) {\n    if (parseInt(tin, 10) % 11 !== 0) {\n      // Some numbers up to and including 1985 are still valid if\n      // check (last) digit equals 0 and modulo of first 9 digits equals 10\n      var checkdigit = parseInt(tin.slice(0, 9), 10) % 11;\n\n      if (parseInt(full_year, 10) < 1986 && checkdigit === 10) {\n        if (parseInt(tin.slice(9), 10) !== 0) {\n          return false;\n        }\n      } else {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n/*\n * de-AT validation function\n * (Abgabenkontonummer, persons/entities)\n * Verify TIN validity by calling luhnCheck()\n */\n\n\nfunction deAtCheck(tin) {\n  return algorithms.luhnCheck(tin);\n}\n/*\n * de-DE validation function\n * (Steueridentifikationsnummer (Steuer-IdNr.), persons only)\n * Tests for single duplicate/triplicate value, then calculates ISO 7064 check (last) digit\n * Partial implementation of spec (same result with both algorithms always)\n */\n\n\nfunction deDeCheck(tin) {\n  // Split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  }); // Fill array with strings of number positions\n\n  var occurences = [];\n\n  for (var i = 0; i < digits.length - 1; i++) {\n    occurences.push('');\n\n    for (var j = 0; j < digits.length - 1; j++) {\n      if (digits[i] === digits[j]) {\n        occurences[i] += j;\n      }\n    }\n  } // Remove digits with one occurence and test for only one duplicate/triplicate\n\n\n  occurences = occurences.filter(function (a) {\n    return a.length > 1;\n  });\n\n  if (occurences.length !== 2 && occurences.length !== 3) {\n    return false;\n  } // In case of triplicate value only two digits are allowed next to each other\n\n\n  if (occurences[0].length === 3) {\n    var trip_locations = occurences[0].split('').map(function (a) {\n      return parseInt(a, 10);\n    });\n    var recurrent = 0; // Amount of neighbour occurences\n\n    for (var _i = 0; _i < trip_locations.length - 1; _i++) {\n      if (trip_locations[_i] + 1 === trip_locations[_i + 1]) {\n        recurrent += 1;\n      }\n    }\n\n    if (recurrent === 2) {\n      return false;\n    }\n  }\n\n  return algorithms.iso7064Check(tin);\n}\n/*\n * dk-DK validation function\n * (CPR-nummer (personnummer), persons only)\n * Checks if birth date (first six digits) is valid and assigned to century (seventh) digit,\n * and calculates check (last) digit\n */\n\n\nfunction dkDkCheck(tin) {\n  tin = tin.replace(/\\W/, ''); // Extract year, check if valid for given century digit and add century\n\n  var year = parseInt(tin.slice(4, 6), 10);\n  var century_digit = tin.slice(6, 7);\n\n  switch (century_digit) {\n    case '0':\n    case '1':\n    case '2':\n    case '3':\n      year = \"19\".concat(year);\n      break;\n\n    case '4':\n    case '9':\n      if (year < 37) {\n        year = \"20\".concat(year);\n      } else {\n        year = \"19\".concat(year);\n      }\n\n      break;\n\n    default:\n      if (year < 37) {\n        year = \"20\".concat(year);\n      } else if (year > 58) {\n        year = \"18\".concat(year);\n      } else {\n        return false;\n      }\n\n      break;\n  } // Add missing zero if needed\n\n\n  if (year.length === 3) {\n    year = [year.slice(0, 2), '0', year.slice(2)].join('');\n  } // Check date validity\n\n\n  var date = \"\".concat(year, \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(0, 2));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Split digits into an array for further processing\n\n\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  var weight = 4; // Multiply by weight and add to checksum\n\n  for (var i = 0; i < 9; i++) {\n    checksum += digits[i] * weight;\n    weight -= 1;\n\n    if (weight === 1) {\n      weight = 7;\n    }\n  }\n\n  checksum %= 11;\n\n  if (checksum === 1) {\n    return false;\n  }\n\n  return checksum === 0 ? digits[9] === 0 : digits[9] === 11 - checksum;\n}\n/*\n * el-CY validation function\n * (Arithmos Forologikou Mitroou (AFM/ΑΦΜ), persons only)\n * Verify TIN validity by calculating ASCII value of check (last) character\n */\n\n\nfunction elCyCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.slice(0, 8).split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0; // add digits in even places\n\n  for (var i = 1; i < digits.length; i += 2) {\n    checksum += digits[i];\n  } // add digits in odd places\n\n\n  for (var _i2 = 0; _i2 < digits.length; _i2 += 2) {\n    if (digits[_i2] < 2) {\n      checksum += 1 - digits[_i2];\n    } else {\n      checksum += 2 * (digits[_i2] - 2) + 5;\n\n      if (digits[_i2] > 4) {\n        checksum += 2;\n      }\n    }\n  }\n\n  return String.fromCharCode(checksum % 26 + 65) === tin.charAt(8);\n}\n/*\n * el-GR validation function\n * (Arithmos Forologikou Mitroou (AFM/ΑΦΜ), persons/entities)\n * Verify TIN validity by calculating check (last) digit\n * Algorithm not in DG TAXUD document- sourced from:\n * - `http://epixeirisi.gr/%CE%9A%CE%A1%CE%99%CE%A3%CE%99%CE%9C%CE%91-%CE%98%CE%95%CE%9C%CE%91%CE%A4%CE%91-%CE%A6%CE%9F%CE%A1%CE%9F%CE%9B%CE%9F%CE%93%CE%99%CE%91%CE%A3-%CE%9A%CE%91%CE%99-%CE%9B%CE%9F%CE%93%CE%99%CE%A3%CE%A4%CE%99%CE%9A%CE%97%CE%A3/23791/%CE%91%CF%81%CE%B9%CE%B8%CE%BC%CF%8C%CF%82-%CE%A6%CE%BF%CF%81%CE%BF%CE%BB%CE%BF%CE%B3%CE%B9%CE%BA%CE%BF%CF%8D-%CE%9C%CE%B7%CF%84%CF%81%CF%8E%CE%BF%CF%85`\n */\n\n\nfunction elGrCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n\n  for (var i = 0; i < 8; i++) {\n    checksum += digits[i] * Math.pow(2, 8 - i);\n  }\n\n  return checksum % 11 % 10 === digits[8];\n}\n/*\n * en-GB validation function (should go here if needed)\n * (National Insurance Number (NINO) or Unique Taxpayer Reference (UTR),\n * persons/entities respectively)\n */\n\n/*\n * en-IE validation function\n * (Personal Public Service Number (PPS No), persons only)\n * Verify TIN validity by calculating check (second to last) character\n */\n\n\nfunction enIeCheck(tin) {\n  var checksum = algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 7).map(function (a) {\n    return parseInt(a, 10);\n  }), 8);\n\n  if (tin.length === 9 && tin[8] !== 'W') {\n    checksum += (tin[8].charCodeAt(0) - 64) * 9;\n  }\n\n  checksum %= 23;\n\n  if (checksum === 0) {\n    return tin[7].toUpperCase() === 'W';\n  }\n\n  return tin[7].toUpperCase() === String.fromCharCode(64 + checksum);\n} // Valid US IRS campus prefixes\n\n\nvar enUsCampusPrefix = {\n  andover: ['10', '12'],\n  atlanta: ['60', '67'],\n  austin: ['50', '53'],\n  brookhaven: ['01', '02', '03', '04', '05', '06', '11', '13', '14', '16', '21', '22', '23', '25', '34', '51', '52', '54', '55', '56', '57', '58', '59', '65'],\n  cincinnati: ['30', '32', '35', '36', '37', '38', '61'],\n  fresno: ['15', '24'],\n  internet: ['20', '26', '27', '45', '46', '47'],\n  kansas: ['40', '44'],\n  memphis: ['94', '95'],\n  ogden: ['80', '90'],\n  philadelphia: ['33', '39', '41', '42', '43', '46', '48', '62', '63', '64', '66', '68', '71', '72', '73', '74', '75', '76', '77', '81', '82', '83', '84', '85', '86', '87', '88', '91', '92', '93', '98', '99'],\n  sba: ['31']\n}; // Return an array of all US IRS campus prefixes\n\nfunction enUsGetPrefixes() {\n  var prefixes = [];\n\n  for (var location in enUsCampusPrefix) {\n    // https://github.com/gotwarlost/istanbul/blob/master/ignoring-code-for-coverage.md#ignoring-code-for-coverage-purposes\n    // istanbul ignore else\n    if (enUsCampusPrefix.hasOwnProperty(location)) {\n      prefixes.push.apply(prefixes, _toConsumableArray(enUsCampusPrefix[location]));\n    }\n  }\n\n  return prefixes;\n}\n/*\n * en-US validation function\n * Verify that the TIN starts with a valid IRS campus prefix\n */\n\n\nfunction enUsCheck(tin) {\n  return enUsGetPrefixes().indexOf(tin.substr(0, 2)) !== -1;\n}\n/*\n * es-ES validation function\n * (Documento Nacional de Identidad (DNI)\n * or Número de Identificación de Extranjero (NIE), persons only)\n * Verify TIN validity by calculating check (last) character\n */\n\n\nfunction esEsCheck(tin) {\n  // Split characters into an array for further processing\n  var chars = tin.toUpperCase().split(''); // Replace initial letter if needed\n\n  if (isNaN(parseInt(chars[0], 10)) && chars.length > 1) {\n    var lead_replace = 0;\n\n    switch (chars[0]) {\n      case 'Y':\n        lead_replace = 1;\n        break;\n\n      case 'Z':\n        lead_replace = 2;\n        break;\n\n      default:\n    }\n\n    chars.splice(0, 1, lead_replace); // Fill with zeros if smaller than proper\n  } else {\n    while (chars.length < 9) {\n      chars.unshift(0);\n    }\n  } // Calculate checksum and check according to lookup\n\n\n  var lookup = ['T', 'R', 'W', 'A', 'G', 'M', 'Y', 'F', 'P', 'D', 'X', 'B', 'N', 'J', 'Z', 'S', 'Q', 'V', 'H', 'L', 'C', 'K', 'E'];\n  chars = chars.join('');\n  var checksum = parseInt(chars.slice(0, 8), 10) % 23;\n  return chars[8] === lookup[checksum];\n}\n/*\n * et-EE validation function\n * (Isikukood (IK), persons only)\n * Checks if birth date (century digit and six following) is valid and calculates check (last) digit\n * Material not in DG TAXUD document sourced from:\n * - `https://www.oecd.org/tax/automatic-exchange/crs-implementation-and-assistance/tax-identification-numbers/Estonia-TIN.pdf`\n */\n\n\nfunction etEeCheck(tin) {\n  // Extract year and add century\n  var full_year = tin.slice(1, 3);\n  var century_digit = tin.slice(0, 1);\n\n  switch (century_digit) {\n    case '1':\n    case '2':\n      full_year = \"18\".concat(full_year);\n      break;\n\n    case '3':\n    case '4':\n      full_year = \"19\".concat(full_year);\n      break;\n\n    default:\n      full_year = \"20\".concat(full_year);\n      break;\n  } // Check date validity\n\n\n  var date = \"\".concat(full_year, \"/\").concat(tin.slice(3, 5), \"/\").concat(tin.slice(5, 7));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Split digits into an array for further processing\n\n\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 0;\n  var weight = 1; // Multiply by weight and add to checksum\n\n  for (var i = 0; i < 10; i++) {\n    checksum += digits[i] * weight;\n    weight += 1;\n\n    if (weight === 10) {\n      weight = 1;\n    }\n  } // Do again if modulo 11 of checksum is 10\n\n\n  if (checksum % 11 === 10) {\n    checksum = 0;\n    weight = 3;\n\n    for (var _i3 = 0; _i3 < 10; _i3++) {\n      checksum += digits[_i3] * weight;\n      weight += 1;\n\n      if (weight === 10) {\n        weight = 1;\n      }\n    }\n\n    if (checksum % 11 === 10) {\n      return digits[10] === 0;\n    }\n  }\n\n  return checksum % 11 === digits[10];\n}\n/*\n * fi-FI validation function\n * (Henkilötunnus (HETU), persons only)\n * Checks if birth date (first six digits plus century symbol) is valid\n * and calculates check (last) digit\n */\n\n\nfunction fiFiCheck(tin) {\n  // Extract year and add century\n  var full_year = tin.slice(4, 6);\n  var century_symbol = tin.slice(6, 7);\n\n  switch (century_symbol) {\n    case '+':\n      full_year = \"18\".concat(full_year);\n      break;\n\n    case '-':\n      full_year = \"19\".concat(full_year);\n      break;\n\n    default:\n      full_year = \"20\".concat(full_year);\n      break;\n  } // Check date validity\n\n\n  var date = \"\".concat(full_year, \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(0, 2));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Calculate check character\n\n\n  var checksum = parseInt(tin.slice(0, 6) + tin.slice(7, 10), 10) % 31;\n\n  if (checksum < 10) {\n    return checksum === parseInt(tin.slice(10), 10);\n  }\n\n  checksum -= 10;\n  var letters_lookup = ['A', 'B', 'C', 'D', 'E', 'F', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y'];\n  return letters_lookup[checksum] === tin.slice(10);\n}\n/*\n * fr/nl-BE validation function\n * (Numéro national (N.N.), persons only)\n * Checks if birth date (first six digits) is valid and calculates check (last two) digits\n */\n\n\nfunction frBeCheck(tin) {\n  // Zero month/day value is acceptable\n  if (tin.slice(2, 4) !== '00' || tin.slice(4, 6) !== '00') {\n    // Extract date from first six digits of TIN\n    var date = \"\".concat(tin.slice(0, 2), \"/\").concat(tin.slice(2, 4), \"/\").concat(tin.slice(4, 6));\n\n    if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n      return false;\n    }\n  }\n\n  var checksum = 97 - parseInt(tin.slice(0, 9), 10) % 97;\n  var checkdigits = parseInt(tin.slice(9, 11), 10);\n\n  if (checksum !== checkdigits) {\n    checksum = 97 - parseInt(\"2\".concat(tin.slice(0, 9)), 10) % 97;\n\n    if (checksum !== checkdigits) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/*\n * fr-FR validation function\n * (Numéro fiscal de référence (numéro SPI), persons only)\n * Verify TIN validity by calculating check (last three) digits\n */\n\n\nfunction frFrCheck(tin) {\n  tin = tin.replace(/\\s/g, '');\n  var checksum = parseInt(tin.slice(0, 10), 10) % 511;\n  var checkdigits = parseInt(tin.slice(10, 13), 10);\n  return checksum === checkdigits;\n}\n/*\n * fr/lb-LU validation function\n * (numéro d’identification personnelle, persons only)\n * Verify birth date validity and run Luhn and Verhoeff checks\n */\n\n\nfunction frLuCheck(tin) {\n  // Extract date and check validity\n  var date = \"\".concat(tin.slice(0, 4), \"/\").concat(tin.slice(4, 6), \"/\").concat(tin.slice(6, 8));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Run Luhn check\n\n\n  if (!algorithms.luhnCheck(tin.slice(0, 12))) {\n    return false;\n  } // Remove Luhn check digit and run Verhoeff check\n\n\n  return algorithms.verhoeffCheck(\"\".concat(tin.slice(0, 11)).concat(tin[12]));\n}\n/*\n * hr-HR validation function\n * (Osobni identifikacijski broj (OIB), persons/entities)\n * Verify TIN validity by calling iso7064Check(digits)\n */\n\n\nfunction hrHrCheck(tin) {\n  return algorithms.iso7064Check(tin);\n}\n/*\n * hu-HU validation function\n * (Adóazonosító jel, persons only)\n * Verify TIN validity by calculating check (last) digit\n */\n\n\nfunction huHuCheck(tin) {\n  // split digits into an array for further processing\n  var digits = tin.split('').map(function (a) {\n    return parseInt(a, 10);\n  });\n  var checksum = 8;\n\n  for (var i = 1; i < 9; i++) {\n    checksum += digits[i] * (i + 1);\n  }\n\n  return checksum % 11 === digits[9];\n}\n/*\n * lt-LT validation function (should go here if needed)\n * (Asmens kodas, persons/entities respectively)\n * Current validation check is alias of etEeCheck- same format applies\n */\n\n/*\n * it-IT first/last name validity check\n * Accepts it-IT TIN-encoded names as a three-element character array and checks their validity\n * Due to lack of clarity between resources (\"Are only Italian consonants used?\n * What happens if a person has X in their name?\" etc.) only two test conditions\n * have been implemented:\n * Vowels may only be followed by other vowels or an X character\n * and X characters after vowels may only be followed by other X characters.\n */\n\n\nfunction itItNameCheck(name) {\n  // true at the first occurence of a vowel\n  var vowelflag = false; // true at the first occurence of an X AFTER vowel\n  // (to properly handle last names with X as consonant)\n\n  var xflag = false;\n\n  for (var i = 0; i < 3; i++) {\n    if (!vowelflag && /[AEIOU]/.test(name[i])) {\n      vowelflag = true;\n    } else if (!xflag && vowelflag && name[i] === 'X') {\n      xflag = true;\n    } else if (i > 0) {\n      if (vowelflag && !xflag) {\n        if (!/[AEIOU]/.test(name[i])) {\n          return false;\n        }\n      }\n\n      if (xflag) {\n        if (!/X/.test(name[i])) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n/*\n * it-IT validation function\n * (Codice fiscale (TIN-IT), persons only)\n * Verify name, birth date and codice catastale validity\n * and calculate check character.\n * Material not in DG-TAXUD document sourced from:\n * `https://en.wikipedia.org/wiki/Italian_fiscal_code`\n */\n\n\nfunction itItCheck(tin) {\n  // Capitalize and split characters into an array for further processing\n  var chars = tin.toUpperCase().split(''); // Check first and last name validity calling itItNameCheck()\n\n  if (!itItNameCheck(chars.slice(0, 3))) {\n    return false;\n  }\n\n  if (!itItNameCheck(chars.slice(3, 6))) {\n    return false;\n  } // Convert letters in number spaces back to numbers if any\n\n\n  var number_locations = [6, 7, 9, 10, 12, 13, 14];\n  var number_replace = {\n    L: '0',\n    M: '1',\n    N: '2',\n    P: '3',\n    Q: '4',\n    R: '5',\n    S: '6',\n    T: '7',\n    U: '8',\n    V: '9'\n  };\n\n  for (var _i4 = 0, _number_locations = number_locations; _i4 < _number_locations.length; _i4++) {\n    var i = _number_locations[_i4];\n\n    if (chars[i] in number_replace) {\n      chars.splice(i, 1, number_replace[chars[i]]);\n    }\n  } // Extract month and day, and check date validity\n\n\n  var month_replace = {\n    A: '01',\n    B: '02',\n    C: '03',\n    D: '04',\n    E: '05',\n    H: '06',\n    L: '07',\n    M: '08',\n    P: '09',\n    R: '10',\n    S: '11',\n    T: '12'\n  };\n  var month = month_replace[chars[8]];\n  var day = parseInt(chars[9] + chars[10], 10);\n\n  if (day > 40) {\n    day -= 40;\n  }\n\n  if (day < 10) {\n    day = \"0\".concat(day);\n  }\n\n  var date = \"\".concat(chars[6]).concat(chars[7], \"/\").concat(month, \"/\").concat(day);\n\n  if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n    return false;\n  } // Calculate check character by adding up even and odd characters as numbers\n\n\n  var checksum = 0;\n\n  for (var _i5 = 1; _i5 < chars.length - 1; _i5 += 2) {\n    var char_to_int = parseInt(chars[_i5], 10);\n\n    if (isNaN(char_to_int)) {\n      char_to_int = chars[_i5].charCodeAt(0) - 65;\n    }\n\n    checksum += char_to_int;\n  }\n\n  var odd_convert = {\n    // Maps of characters at odd places\n    A: 1,\n    B: 0,\n    C: 5,\n    D: 7,\n    E: 9,\n    F: 13,\n    G: 15,\n    H: 17,\n    I: 19,\n    J: 21,\n    K: 2,\n    L: 4,\n    M: 18,\n    N: 20,\n    O: 11,\n    P: 3,\n    Q: 6,\n    R: 8,\n    S: 12,\n    T: 14,\n    U: 16,\n    V: 10,\n    W: 22,\n    X: 25,\n    Y: 24,\n    Z: 23,\n    0: 1,\n    1: 0\n  };\n\n  for (var _i6 = 0; _i6 < chars.length - 1; _i6 += 2) {\n    var _char_to_int = 0;\n\n    if (chars[_i6] in odd_convert) {\n      _char_to_int = odd_convert[chars[_i6]];\n    } else {\n      var multiplier = parseInt(chars[_i6], 10);\n      _char_to_int = 2 * multiplier + 1;\n\n      if (multiplier > 4) {\n        _char_to_int += 2;\n      }\n    }\n\n    checksum += _char_to_int;\n  }\n\n  if (String.fromCharCode(65 + checksum % 26) !== chars[15]) {\n    return false;\n  }\n\n  return true;\n}\n/*\n * lv-LV validation function\n * (Personas kods (PK), persons only)\n * Check validity of birth date and calculate check (last) digit\n * Support only for old format numbers (not starting with '32', issued before 2017/07/01)\n * Material not in DG TAXUD document sourced from:\n * `https://boot.ritakafija.lv/forums/index.php?/topic/88314-personas-koda-algoritms-%C4%8Deksumma/`\n */\n\n\nfunction lvLvCheck(tin) {\n  tin = tin.replace(/\\W/, ''); // Extract date from TIN\n\n  var day = tin.slice(0, 2);\n\n  if (day !== '32') {\n    // No date/checksum check if new format\n    var month = tin.slice(2, 4);\n\n    if (month !== '00') {\n      // No date check if unknown month\n      var full_year = tin.slice(4, 6);\n\n      switch (tin[6]) {\n        case '0':\n          full_year = \"18\".concat(full_year);\n          break;\n\n        case '1':\n          full_year = \"19\".concat(full_year);\n          break;\n\n        default:\n          full_year = \"20\".concat(full_year);\n          break;\n      } // Check date validity\n\n\n      var date = \"\".concat(full_year, \"/\").concat(tin.slice(2, 4), \"/\").concat(day);\n\n      if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n        return false;\n      }\n    } // Calculate check digit\n\n\n    var checksum = 1101;\n    var multip_lookup = [1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\n\n    for (var i = 0; i < tin.length - 1; i++) {\n      checksum -= parseInt(tin[i], 10) * multip_lookup[i];\n    }\n\n    return parseInt(tin[10], 10) === checksum % 11;\n  }\n\n  return true;\n}\n/*\n * mt-MT validation function\n * (Identity Card Number or Unique Taxpayer Reference, persons/entities)\n * Verify Identity Card Number structure (no other tests found)\n */\n\n\nfunction mtMtCheck(tin) {\n  if (tin.length !== 9) {\n    // No tests for UTR\n    var chars = tin.toUpperCase().split(''); // Fill with zeros if smaller than proper\n\n    while (chars.length < 8) {\n      chars.unshift(0);\n    } // Validate format according to last character\n\n\n    switch (tin[7]) {\n      case 'A':\n      case 'P':\n        if (parseInt(chars[6], 10) === 0) {\n          return false;\n        }\n\n        break;\n\n      default:\n        {\n          var first_part = parseInt(chars.join('').slice(0, 5), 10);\n\n          if (first_part > 32000) {\n            return false;\n          }\n\n          var second_part = parseInt(chars.join('').slice(5, 7), 10);\n\n          if (first_part === second_part) {\n            return false;\n          }\n        }\n    }\n  }\n\n  return true;\n}\n/*\n * nl-NL validation function\n * (Burgerservicenummer (BSN) or Rechtspersonen Samenwerkingsverbanden Informatie Nummer (RSIN),\n * persons/entities respectively)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\n\n\nfunction nlNlCheck(tin) {\n  return algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {\n    return parseInt(a, 10);\n  }), 9) % 11 === parseInt(tin[8], 10);\n}\n/*\n * pl-PL validation function\n * (Powszechny Elektroniczny System Ewidencji Ludności (PESEL)\n * or Numer identyfikacji podatkowej (NIP), persons/entities)\n * Verify TIN validity by validating birth date (PESEL) and calculating check (last) digit\n */\n\n\nfunction plPlCheck(tin) {\n  // NIP\n  if (tin.length === 10) {\n    // Calculate last digit by multiplying with lookup\n    var lookup = [6, 5, 7, 2, 3, 4, 5, 6, 7];\n    var _checksum = 0;\n\n    for (var i = 0; i < lookup.length; i++) {\n      _checksum += parseInt(tin[i], 10) * lookup[i];\n    }\n\n    _checksum %= 11;\n\n    if (_checksum === 10) {\n      return false;\n    }\n\n    return _checksum === parseInt(tin[9], 10);\n  } // PESEL\n  // Extract full year using month\n\n\n  var full_year = tin.slice(0, 2);\n  var month = parseInt(tin.slice(2, 4), 10);\n\n  if (month > 80) {\n    full_year = \"18\".concat(full_year);\n    month -= 80;\n  } else if (month > 60) {\n    full_year = \"22\".concat(full_year);\n    month -= 60;\n  } else if (month > 40) {\n    full_year = \"21\".concat(full_year);\n    month -= 40;\n  } else if (month > 20) {\n    full_year = \"20\".concat(full_year);\n    month -= 20;\n  } else {\n    full_year = \"19\".concat(full_year);\n  } // Add leading zero to month if needed\n\n\n  if (month < 10) {\n    month = \"0\".concat(month);\n  } // Check date validity\n\n\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n\n  if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  } // Calculate last digit by mulitplying with odd one-digit numbers except 5\n\n\n  var checksum = 0;\n  var multiplier = 1;\n\n  for (var _i7 = 0; _i7 < tin.length - 1; _i7++) {\n    checksum += parseInt(tin[_i7], 10) * multiplier % 10;\n    multiplier += 2;\n\n    if (multiplier > 10) {\n      multiplier = 1;\n    } else if (multiplier === 5) {\n      multiplier += 2;\n    }\n  }\n\n  checksum = 10 - checksum % 10;\n  return checksum === parseInt(tin[10], 10);\n}\n/*\n* pt-BR validation function\n* (Cadastro de Pessoas Físicas (CPF, persons)\n* Cadastro Nacional de Pessoas Jurídicas (CNPJ, entities)\n* Both inputs will be validated\n*/\n\n\nfunction ptBrCheck(tin) {\n  if (tin.length === 11) {\n    var _sum;\n\n    var remainder;\n    _sum = 0;\n    if ( // Reject known invalid CPFs\n    tin === '11111111111' || tin === '22222222222' || tin === '33333333333' || tin === '44444444444' || tin === '55555555555' || tin === '66666666666' || tin === '77777777777' || tin === '88888888888' || tin === '99999999999' || tin === '00000000000') return false;\n\n    for (var i = 1; i <= 9; i++) {\n      _sum += parseInt(tin.substring(i - 1, i), 10) * (11 - i);\n    }\n\n    remainder = _sum * 10 % 11;\n    if (remainder === 10) remainder = 0;\n    if (remainder !== parseInt(tin.substring(9, 10), 10)) return false;\n    _sum = 0;\n\n    for (var _i8 = 1; _i8 <= 10; _i8++) {\n      _sum += parseInt(tin.substring(_i8 - 1, _i8), 10) * (12 - _i8);\n    }\n\n    remainder = _sum * 10 % 11;\n    if (remainder === 10) remainder = 0;\n    if (remainder !== parseInt(tin.substring(10, 11), 10)) return false;\n    return true;\n  }\n\n  if ( // Reject know invalid CNPJs\n  tin === '00000000000000' || tin === '11111111111111' || tin === '22222222222222' || tin === '33333333333333' || tin === '44444444444444' || tin === '55555555555555' || tin === '66666666666666' || tin === '77777777777777' || tin === '88888888888888' || tin === '99999999999999') {\n    return false;\n  }\n\n  var length = tin.length - 2;\n  var identifiers = tin.substring(0, length);\n  var verificators = tin.substring(length);\n  var sum = 0;\n  var pos = length - 7;\n\n  for (var _i9 = length; _i9 >= 1; _i9--) {\n    sum += identifiers.charAt(length - _i9) * pos;\n    pos -= 1;\n\n    if (pos < 2) {\n      pos = 9;\n    }\n  }\n\n  var result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n\n  if (result !== parseInt(verificators.charAt(0), 10)) {\n    return false;\n  }\n\n  length += 1;\n  identifiers = tin.substring(0, length);\n  sum = 0;\n  pos = length - 7;\n\n  for (var _i10 = length; _i10 >= 1; _i10--) {\n    sum += identifiers.charAt(length - _i10) * pos;\n    pos -= 1;\n\n    if (pos < 2) {\n      pos = 9;\n    }\n  }\n\n  result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n\n  if (result !== parseInt(verificators.charAt(1), 10)) {\n    return false;\n  }\n\n  return true;\n}\n/*\n * pt-PT validation function\n * (Número de identificação fiscal (NIF), persons/entities)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\n\n\nfunction ptPtCheck(tin) {\n  var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 8).map(function (a) {\n    return parseInt(a, 10);\n  }), 9) % 11;\n\n  if (checksum > 9) {\n    return parseInt(tin[8], 10) === 0;\n  }\n\n  return checksum === parseInt(tin[8], 10);\n}\n/*\n * ro-RO validation function\n * (Cod Numeric Personal (CNP) or Cod de înregistrare fiscală (CIF),\n * persons only)\n * Verify CNP validity by calculating check (last) digit (test not found for CIF)\n * Material not in DG TAXUD document sourced from:\n * `https://en.wikipedia.org/wiki/National_identification_number#Romania`\n */\n\n\nfunction roRoCheck(tin) {\n  if (tin.slice(0, 4) !== '9000') {\n    // No test found for this format\n    // Extract full year using century digit if possible\n    var full_year = tin.slice(1, 3);\n\n    switch (tin[0]) {\n      case '1':\n      case '2':\n        full_year = \"19\".concat(full_year);\n        break;\n\n      case '3':\n      case '4':\n        full_year = \"18\".concat(full_year);\n        break;\n\n      case '5':\n      case '6':\n        full_year = \"20\".concat(full_year);\n        break;\n\n      default:\n    } // Check date validity\n\n\n    var date = \"\".concat(full_year, \"/\").concat(tin.slice(3, 5), \"/\").concat(tin.slice(5, 7));\n\n    if (date.length === 8) {\n      if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n        return false;\n      }\n    } else if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n      return false;\n    } // Calculate check digit\n\n\n    var digits = tin.split('').map(function (a) {\n      return parseInt(a, 10);\n    });\n    var multipliers = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9];\n    var checksum = 0;\n\n    for (var i = 0; i < multipliers.length; i++) {\n      checksum += digits[i] * multipliers[i];\n    }\n\n    if (checksum % 11 === 10) {\n      return digits[12] === 1;\n    }\n\n    return digits[12] === checksum % 11;\n  }\n\n  return true;\n}\n/*\n * sk-SK validation function\n * (Rodné číslo (RČ) or bezvýznamové identifikačné číslo (BIČ), persons only)\n * Checks validity of pre-1954 birth numbers (rodné číslo) only\n * Due to the introduction of the pseudo-random BIČ it is not possible to test\n * post-1954 birth numbers without knowing whether they are BIČ or RČ beforehand\n */\n\n\nfunction skSkCheck(tin) {\n  if (tin.length === 9) {\n    tin = tin.replace(/\\W/, '');\n\n    if (tin.slice(6) === '000') {\n      return false;\n    } // Three-zero serial not assigned before 1954\n    // Extract full year from TIN length\n\n\n    var full_year = parseInt(tin.slice(0, 2), 10);\n\n    if (full_year > 53) {\n      return false;\n    }\n\n    if (full_year < 10) {\n      full_year = \"190\".concat(full_year);\n    } else {\n      full_year = \"19\".concat(full_year);\n    } // Extract month from TIN and normalize\n\n\n    var month = parseInt(tin.slice(2, 4), 10);\n\n    if (month > 50) {\n      month -= 50;\n    }\n\n    if (month < 10) {\n      month = \"0\".concat(month);\n    } // Check date validity\n\n\n    var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(tin.slice(4, 6));\n\n    if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/*\n * sl-SI validation function\n * (Davčna številka, persons/entities)\n * Verify TIN validity by calculating check (last) digit (variant of MOD 11)\n */\n\n\nfunction slSiCheck(tin) {\n  var checksum = 11 - algorithms.reverseMultiplyAndSum(tin.split('').slice(0, 7).map(function (a) {\n    return parseInt(a, 10);\n  }), 8) % 11;\n\n  if (checksum === 10) {\n    return parseInt(tin[7], 10) === 0;\n  }\n\n  return checksum === parseInt(tin[7], 10);\n}\n/*\n * sv-SE validation function\n * (Personnummer or samordningsnummer, persons only)\n * Checks validity of birth date and calls luhnCheck() to validate check (last) digit\n */\n\n\nfunction svSeCheck(tin) {\n  // Make copy of TIN and normalize to two-digit year form\n  var tin_copy = tin.slice(0);\n\n  if (tin.length > 11) {\n    tin_copy = tin_copy.slice(2);\n  } // Extract date of birth\n\n\n  var full_year = '';\n  var month = tin_copy.slice(2, 4);\n  var day = parseInt(tin_copy.slice(4, 6), 10);\n\n  if (tin.length > 11) {\n    full_year = tin.slice(0, 4);\n  } else {\n    full_year = tin.slice(0, 2);\n\n    if (tin.length === 11 && day < 60) {\n      // Extract full year from centenarian symbol\n      // Should work just fine until year 10000 or so\n      var current_year = new Date().getFullYear().toString();\n      var current_century = parseInt(current_year.slice(0, 2), 10);\n      current_year = parseInt(current_year, 10);\n\n      if (tin[6] === '-') {\n        if (parseInt(\"\".concat(current_century).concat(full_year), 10) > current_year) {\n          full_year = \"\".concat(current_century - 1).concat(full_year);\n        } else {\n          full_year = \"\".concat(current_century).concat(full_year);\n        }\n      } else {\n        full_year = \"\".concat(current_century - 1).concat(full_year);\n\n        if (current_year - parseInt(full_year, 10) < 100) {\n          return false;\n        }\n      }\n    }\n  } // Normalize day and check date validity\n\n\n  if (day > 60) {\n    day -= 60;\n  }\n\n  if (day < 10) {\n    day = \"0\".concat(day);\n  }\n\n  var date = \"\".concat(full_year, \"/\").concat(month, \"/\").concat(day);\n\n  if (date.length === 8) {\n    if (!(0, _isDate.default)(date, 'YY/MM/DD')) {\n      return false;\n    }\n  } else if (!(0, _isDate.default)(date, 'YYYY/MM/DD')) {\n    return false;\n  }\n\n  return algorithms.luhnCheck(tin.replace(/\\W/, ''));\n} // Locale lookup objects\n\n/*\n * Tax id regex formats for various locales\n *\n * Where not explicitly specified in DG-TAXUD document both\n * uppercase and lowercase letters are acceptable.\n */\n\n\nvar taxIdFormat = {\n  'bg-BG': /^\\d{10}$/,\n  'cs-CZ': /^\\d{6}\\/{0,1}\\d{3,4}$/,\n  'de-AT': /^\\d{9}$/,\n  'de-DE': /^[1-9]\\d{10}$/,\n  'dk-DK': /^\\d{6}-{0,1}\\d{4}$/,\n  'el-CY': /^[09]\\d{7}[A-Z]$/,\n  'el-GR': /^([0-4]|[7-9])\\d{8}$/,\n  'en-GB': /^\\d{10}$|^(?!GB|NK|TN|ZZ)(?![DFIQUV])[A-Z](?![DFIQUVO])[A-Z]\\d{6}[ABCD ]$/i,\n  'en-IE': /^\\d{7}[A-W][A-IW]{0,1}$/i,\n  'en-US': /^\\d{2}[- ]{0,1}\\d{7}$/,\n  'es-ES': /^(\\d{0,8}|[XYZKLM]\\d{7})[A-HJ-NP-TV-Z]$/i,\n  'et-EE': /^[1-6]\\d{6}(00[1-9]|0[1-9][0-9]|[1-6][0-9]{2}|70[0-9]|710)\\d$/,\n  'fi-FI': /^\\d{6}[-+A]\\d{3}[0-9A-FHJ-NPR-Y]$/i,\n  'fr-BE': /^\\d{11}$/,\n  'fr-FR': /^[0-3]\\d{12}$|^[0-3]\\d\\s\\d{2}(\\s\\d{3}){3}$/,\n  // Conforms both to official spec and provided example\n  'fr-LU': /^\\d{13}$/,\n  'hr-HR': /^\\d{11}$/,\n  'hu-HU': /^8\\d{9}$/,\n  'it-IT': /^[A-Z]{6}[L-NP-V0-9]{2}[A-EHLMPRST][L-NP-V0-9]{2}[A-ILMZ][L-NP-V0-9]{3}[A-Z]$/i,\n  'lv-LV': /^\\d{6}-{0,1}\\d{5}$/,\n  // Conforms both to DG TAXUD spec and original research\n  'mt-MT': /^\\d{3,7}[APMGLHBZ]$|^([1-8])\\1\\d{7}$/i,\n  'nl-NL': /^\\d{9}$/,\n  'pl-PL': /^\\d{10,11}$/,\n  'pt-BR': /(?:^\\d{11}$)|(?:^\\d{14}$)/,\n  'pt-PT': /^\\d{9}$/,\n  'ro-RO': /^\\d{13}$/,\n  'sk-SK': /^\\d{6}\\/{0,1}\\d{3,4}$/,\n  'sl-SI': /^[1-9]\\d{7}$/,\n  'sv-SE': /^(\\d{6}[-+]{0,1}\\d{4}|(18|19|20)\\d{6}[-+]{0,1}\\d{4})$/\n}; // taxIdFormat locale aliases\n\ntaxIdFormat['lb-LU'] = taxIdFormat['fr-LU'];\ntaxIdFormat['lt-LT'] = taxIdFormat['et-EE'];\ntaxIdFormat['nl-BE'] = taxIdFormat['fr-BE']; // Algorithmic tax id check functions for various locales\n\nvar taxIdCheck = {\n  'bg-BG': bgBgCheck,\n  'cs-CZ': csCzCheck,\n  'de-AT': deAtCheck,\n  'de-DE': deDeCheck,\n  'dk-DK': dkDkCheck,\n  'el-CY': elCyCheck,\n  'el-GR': elGrCheck,\n  'en-IE': enIeCheck,\n  'en-US': enUsCheck,\n  'es-ES': esEsCheck,\n  'et-EE': etEeCheck,\n  'fi-FI': fiFiCheck,\n  'fr-BE': frBeCheck,\n  'fr-FR': frFrCheck,\n  'fr-LU': frLuCheck,\n  'hr-HR': hrHrCheck,\n  'hu-HU': huHuCheck,\n  'it-IT': itItCheck,\n  'lv-LV': lvLvCheck,\n  'mt-MT': mtMtCheck,\n  'nl-NL': nlNlCheck,\n  'pl-PL': plPlCheck,\n  'pt-BR': ptBrCheck,\n  'pt-PT': ptPtCheck,\n  'ro-RO': roRoCheck,\n  'sk-SK': skSkCheck,\n  'sl-SI': slSiCheck,\n  'sv-SE': svSeCheck\n}; // taxIdCheck locale aliases\n\ntaxIdCheck['lb-LU'] = taxIdCheck['fr-LU'];\ntaxIdCheck['lt-LT'] = taxIdCheck['et-EE'];\ntaxIdCheck['nl-BE'] = taxIdCheck['fr-BE']; // Regexes for locales where characters should be omitted before checking format\n\nvar allsymbols = /[-\\\\\\/!@#$%\\^&\\*\\(\\)\\+\\=\\[\\]]+/g;\nvar sanitizeRegexes = {\n  'de-AT': allsymbols,\n  'de-DE': /[\\/\\\\]/g,\n  'fr-BE': allsymbols\n}; // sanitizeRegexes locale aliases\n\nsanitizeRegexes['nl-BE'] = sanitizeRegexes['fr-BE'];\n/*\n * Validator function\n * Return true if the passed string is a valid tax identification number\n * for the specified locale.\n * Throw an error exception if the locale is not supported.\n */\n\nfunction isTaxID(str) {\n  var locale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'en-US';\n  (0, _assertString.default)(str); // Copy TIN to avoid replacement if sanitized\n\n  var strcopy = str.slice(0);\n\n  if (locale in taxIdFormat) {\n    if (locale in sanitizeRegexes) {\n      strcopy = strcopy.replace(sanitizeRegexes[locale], '');\n    }\n\n    if (!taxIdFormat[locale].test(strcopy)) {\n      return false;\n    }\n\n    if (locale in taxIdCheck) {\n      return taxIdCheck[locale](strcopy);\n    } // Fallthrough; not all locales have algorithmic checks\n\n\n    return true;\n  }\n\n  throw new Error(\"Invalid locale '\".concat(locale, \"'\"));\n}\n\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}